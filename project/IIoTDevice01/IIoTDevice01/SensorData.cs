// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: sensor_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Sensor {

  /// <summary>Holder for reflection information generated from sensor_data.proto</summary>
  public static partial class SensorDataReflection {

    #region Descriptor
    /// <summary>File descriptor for sensor_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SensorDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFzZW5zb3JfZGF0YS5wcm90bxIGU2Vuc29yGh9nb29nbGUvcHJvdG9idWYv",
            "dGltZXN0YW1wLnByb3RvIskBCgpTZW5zb3JEYXRhEgwKBHV1aWQYASABKAkS",
            "EQoJc2Vuc29yX2lkGAIgASgFEi0KCXRpbWVzdGFtcBgDIAEoCzIaLmdvb2ds",
            "ZS5wcm90b2J1Zi5UaW1lc3RhbXASEgoKZXh0cmFfaW5mbxgEIAEoCRIeCgZz",
            "dGF0dXMYBSABKA4yDi5TZW5zb3IuU3RhdHVzEhAKCGh1bWlkaXR5GAYgASgB",
            "EhAKCHByZXNzdXJlGAcgASgBEhMKC3RlbXBlcmF0dXJlGAggASgBKigKBlN0",
            "YXR1cxIGCgJPSxAAEgsKB1dBUk5JTkcQARIJCgVFUlJPUhACYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Sensor.Status), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sensor.SensorData), global::Sensor.SensorData.Parser, new[]{ "Uuid", "SensorId", "Timestamp", "ExtraInfo", "Status", "Humidity", "Pressure", "Temperature" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Status {
    [pbr::OriginalName("OK")] Ok = 0,
    [pbr::OriginalName("WARNING")] Warning = 1,
    [pbr::OriginalName("ERROR")] Error = 2,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class SensorData : pb::IMessage<SensorData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SensorData> _parser = new pb::MessageParser<SensorData>(() => new SensorData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SensorData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Sensor.SensorDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SensorData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SensorData(SensorData other) : this() {
      uuid_ = other.uuid_;
      sensorId_ = other.sensorId_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      extraInfo_ = other.extraInfo_;
      status_ = other.status_;
      humidity_ = other.humidity_;
      pressure_ = other.pressure_;
      temperature_ = other.temperature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SensorData Clone() {
      return new SensorData(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sensor_id" field.</summary>
    public const int SensorIdFieldNumber = 2;
    private int sensorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "extra_info" field.</summary>
    public const int ExtraInfoFieldNumber = 4;
    private string extraInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ExtraInfo {
      get { return extraInfo_; }
      set {
        extraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Sensor.Status status_ = global::Sensor.Status.Ok;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Sensor.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "humidity" field.</summary>
    public const int HumidityFieldNumber = 6;
    private double humidity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Humidity {
      get { return humidity_; }
      set {
        humidity_ = value;
      }
    }

    /// <summary>Field number for the "pressure" field.</summary>
    public const int PressureFieldNumber = 7;
    private double pressure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Pressure {
      get { return pressure_; }
      set {
        pressure_ = value;
      }
    }

    /// <summary>Field number for the "temperature" field.</summary>
    public const int TemperatureFieldNumber = 8;
    private double temperature_;
    /// <summary>
    /// Additional equipment status fields can be added here
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Temperature {
      get { return temperature_; }
      set {
        temperature_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SensorData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SensorData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (SensorId != other.SensorId) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (ExtraInfo != other.ExtraInfo) return false;
      if (Status != other.Status) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Humidity, other.Humidity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pressure, other.Pressure)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (SensorId != 0) hash ^= SensorId.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (ExtraInfo.Length != 0) hash ^= ExtraInfo.GetHashCode();
      if (Status != global::Sensor.Status.Ok) hash ^= Status.GetHashCode();
      if (Humidity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Humidity);
      if (Pressure != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pressure);
      if (Temperature != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Temperature);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (SensorId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SensorId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (ExtraInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExtraInfo);
      }
      if (Status != global::Sensor.Status.Ok) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (Humidity != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Humidity);
      }
      if (Pressure != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Pressure);
      }
      if (Temperature != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Temperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (SensorId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SensorId);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (ExtraInfo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExtraInfo);
      }
      if (Status != global::Sensor.Status.Ok) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
      if (Humidity != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Humidity);
      }
      if (Pressure != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Pressure);
      }
      if (Temperature != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Temperature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (SensorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SensorId);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (ExtraInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraInfo);
      }
      if (Status != global::Sensor.Status.Ok) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Humidity != 0D) {
        size += 1 + 8;
      }
      if (Pressure != 0D) {
        size += 1 + 8;
      }
      if (Temperature != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SensorData other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.SensorId != 0) {
        SensorId = other.SensorId;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.ExtraInfo.Length != 0) {
        ExtraInfo = other.ExtraInfo;
      }
      if (other.Status != global::Sensor.Status.Ok) {
        Status = other.Status;
      }
      if (other.Humidity != 0D) {
        Humidity = other.Humidity;
      }
      if (other.Pressure != 0D) {
        Pressure = other.Pressure;
      }
      if (other.Temperature != 0D) {
        Temperature = other.Temperature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 16: {
            SensorId = input.ReadInt32();
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 34: {
            ExtraInfo = input.ReadString();
            break;
          }
          case 40: {
            Status = (global::Sensor.Status) input.ReadEnum();
            break;
          }
          case 49: {
            Humidity = input.ReadDouble();
            break;
          }
          case 57: {
            Pressure = input.ReadDouble();
            break;
          }
          case 65: {
            Temperature = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 16: {
            SensorId = input.ReadInt32();
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 34: {
            ExtraInfo = input.ReadString();
            break;
          }
          case 40: {
            Status = (global::Sensor.Status) input.ReadEnum();
            break;
          }
          case 49: {
            Humidity = input.ReadDouble();
            break;
          }
          case 57: {
            Pressure = input.ReadDouble();
            break;
          }
          case 65: {
            Temperature = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
